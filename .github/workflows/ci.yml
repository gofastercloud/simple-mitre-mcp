name: CI/CD Pipeline

on:
  push:
    branches: [ main, staging, develop ]
  pull_request:
    branches: [ main, staging ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Install dependencies
      run: |
        uv sync --dev
        
    # Temporarily disable linting to focus on test functionality
    # - name: Run linting
    #   run: |
    #     uv run flake8 src/ tests/ --max-line-length=120 --extend-ignore=E203,W503
        
    # - name: Run type checking
    #   run: |
    #     uv run mypy src/ --ignore-missing-imports
        
    - name: Run tests with coverage
      run: |
        uv run pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing -v
        
    - name: Update test count badge
      if: github.ref == 'refs/heads/main' && matrix.python-version == '3.12'
      run: |
        # Get test count
        TEST_COUNT=$(uv run pytest tests/ --collect-only -q | grep "collected" | tail -1 | sed 's/[^0-9]*\([0-9]\+\).*/\1/')
        echo "Test count: $TEST_COUNT"
        
        # Update README badge (only if test count is a valid number)
        if [[ "$TEST_COUNT" =~ ^[0-9]+$ ]]; then
          sed -i "s/tests-[0-9]*%20passing/tests-${TEST_COUNT}%20passing/g" README.md
          
          # Check if there are changes
          if ! git diff --quiet README.md; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add README.md
            git commit -m "chore: Update test count badge to $TEST_COUNT tests [skip ci]"
            git push
          else
            echo "No badge update needed"
          fi
        else
          echo "Could not parse test count: $TEST_COUNT"
        fi
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Test MCP server functionality
      run: |
        uv run python -c "
        import asyncio
        from src.data_loader import DataLoader
        from src.mcp_server import create_mcp_server
        
        async def test_functionality():
            print('Testing MCP server with real data...')
            loader = DataLoader()
            data = loader.load_data_source('mitre_attack')
            server = create_mcp_server(loader)
            
            # Test basic functionality
            result, _ = await server.call_tool('search_attack', {'query': 'process injection'})
            assert result and len(result) > 0
            print('✅ MCP server functionality verified')
            
        asyncio.run(test_functionality())
        "
        
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      
    - name: Install dependencies
      run: uv sync --dev
      
    - name: Run security checks
      run: |
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run safety check --output json > safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          
  integration:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      
    - name: Install dependencies
      run: uv sync --dev
      
    - name: Test HTTP proxy integration
      run: |
        uv run python -c "
        import sys
        from pathlib import Path
        sys.path.insert(0, str(Path('.').resolve() / 'src'))
        
        from src.data_loader import DataLoader
        from src.mcp_server import create_mcp_server
        from http_proxy import HTTPProxy
        
        print('Testing HTTP proxy integration...')
        
        # Test data loading
        loader = DataLoader()
        data = loader.load_data_source('mitre_attack')
        print(f'✅ Data loaded: {len(data.get(\"techniques\", []))} techniques')
        
        # Test MCP server creation
        mcp_server = create_mcp_server(loader)
        print('✅ MCP server created')
        
        # Test HTTP proxy creation
        proxy = HTTPProxy(mcp_server)
        print('✅ HTTP proxy created')
        
        # Test that proxy has the expected routes
        routes = [route.resource.canonical for route in proxy.app.router.routes()]
        expected_routes = ['/', '/tools', '/call_tool']
        for route in expected_routes:
            assert route in routes, f'Missing route: {route}'
        print('✅ HTTP proxy routes verified')
        
        print('✅ HTTP proxy integration test passed')
        "
        
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      
    - name: Build package
      run: |
        uv build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
