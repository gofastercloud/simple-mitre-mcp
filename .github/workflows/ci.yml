name: CI/CD Pipeline

on:
  push:
    branches: [ main, staging, develop ]
  pull_request:
    branches: [ main, staging ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Install dependencies
      run: |
        uv sync --dev
        
    # Temporarily disable linting to focus on test functionality
    # - name: Run linting
    #   run: |
    #     uv run flake8 src/ tests/ --max-line-length=120 --extend-ignore=E203,W503
        
    # - name: Run type checking
    #   run: |
    #     uv run mypy src/ --ignore-missing-imports
        
    - name: Run tests with coverage
      run: |
        uv run pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing -v
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Test MCP server functionality
      run: |
        uv run python -c "
        import asyncio
        from src.data_loader import DataLoader
        from src.mcp_server import create_mcp_server
        
        async def test_functionality():
            print('Testing MCP server with real data...')
            loader = DataLoader()
            data = loader.load_data_source('mitre_attack')
            server = create_mcp_server(loader)
            
            # Test basic functionality
            result, _ = await server.call_tool('search_attack', {'query': 'process injection'})
            assert result and len(result) > 0
            print('✅ MCP server functionality verified')
            
        asyncio.run(test_functionality())
        "
        
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      
    - name: Install dependencies
      run: uv sync --dev
      
    - name: Run security checks
      run: |
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          
  integration:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      
    - name: Install dependencies
      run: uv sync --dev
      
    - name: Test HTTP proxy integration
      run: |
        uv run python -c "
        import asyncio
        import threading
        import time
        import requests
        from src.data_loader import DataLoader
        from src.mcp_server import create_mcp_server
        import http_proxy
        
        async def test_http_integration():
            print('Testing HTTP proxy integration...')
            loader = DataLoader()
            data = loader.load_data_source('mitre_attack')
            mcp_server = create_mcp_server(loader)
            
            # Start HTTP server in background
            def start_server():
                handler_class = http_proxy.create_http_handler(mcp_server)
                server = http_proxy.HTTPServer(('127.0.0.1', 8003), handler_class)
                server.serve_forever()
            
            server_thread = threading.Thread(target=start_server, daemon=True)
            server_thread.start()
            time.sleep(3)
            
            # Test HTTP endpoint
            response = requests.post('http://127.0.0.1:8003', 
                json={'jsonrpc': '2.0', 'id': 1, 'method': 'tools/list'},
                timeout=10)
            
            assert response.status_code == 200
            result = response.json()
            tools = result.get('result', {}).get('tools', [])
            assert len(tools) == 8
            print('✅ HTTP proxy integration verified')
            
        asyncio.run(test_http_integration())
        "
        
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      
    - name: Build package
      run: |
        uv build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
