{
  "timestamp": 1754619046.534894,
  "total_execution_time": 352.73328828811646,
  "results": {
    "coverage_performance": {
      "success": false,
      "returncode": 1,
      "stdout": "Starting coverage and performance validation...\n\n==================================================\nRUNNING COVERAGE ANALYSIS\n==================================================\nRunning coverage for unit tests...\nRunning coverage for integration tests...\nRunning coverage for performance tests...\nRunning coverage for compatibility tests...\nRunning coverage for deployment tests...\nRunning coverage for e2e tests...\nRunning overall coverage analysis...\n\n==================================================\nRUNNING PERFORMANCE ANALYSIS\n==================================================\nMeasuring execution time for unit tests...\nMeasuring execution time for integration tests...\nMeasuring execution time for performance tests...\nMeasuring execution time for full_suite tests...\n\nValidation report saved to validation_test/coverage_performance_report.txt\n\n================================================================================\nTEST SUITE RATIONALIZATION - COVERAGE & PERFORMANCE VALIDATION\n================================================================================\n\nOVERALL STATUS: \u274c FAILED\n\nCOVERAGE ANALYSIS\n----------------------------------------\nOverall Coverage: 73.8%\nBaseline Comparison: -0.5% change\n\nCoverage by Category:\n  \u274c unit: 22.2% (req: 95%)\n  \u274c integration: 47.7% (req: 85%)\n  \u274c performance: 4.1% (req: 70%)\n  \u274c compatibility: 10.0% (req: 90%)\n  \u274c deployment: 7.0% (req: 80%)\n  \u274c e2e: 33.4% (req: 60%)\n\nCritical Modules:\n  \u274c src/mcp_server.py: 88.7% (req: 95%)\n  \u274c src/data_loader.py: 83.8% (req: 95%)\n  \u2705 src/parsers/__init__.py: 100.0% (req: 90%)\n  \u274c src/parsers/base_parser.py: 0.0% (req: 90%)\n  \u274c src/parsers/stix_parser.py: 58.9% (req: 90%)\n\nPERFORMANCE ANALYSIS\n----------------------------------------\n\u2705 unit: 0.9s (target: 30s)\n\u2705 integration: 1.9s (target: 120s)\n\u2705 full_suite: 37.5s (target: 600s)\n\nPerformance Improvements:\n\nISSUES FOUND\n----------------------------------------\n\u274c Overall coverage 73.8% below requirement 90%\n\u274c unit coverage 22.2% below requirement 95%\n\u274c integration coverage 47.7% below requirement 85%\n\u274c performance coverage 4.1% below requirement 70%\n\u274c compatibility coverage 10.0% below requirement 90%\n\u274c deployment coverage 7.0% below requirement 80%\n\u274c e2e coverage 33.4% below requirement 60%\n\u274c Critical module src/mcp_server.py coverage 88.7% below requirement 95%\n\u274c Critical module src/data_loader.py coverage 83.8% below requirement 95%\n\u274c Critical module src/parsers/base_parser.py coverage 0.0% below requirement 90%\n\u274c Critical module src/parsers/stix_parser.py coverage 58.9% below requirement 90%\n\u274c Coverage decreased from baseline: 74.3% to 73.8%\n\n================================================================================\n",
      "stderr": "",
      "report_file": "validation_test/coverage_performance_report.txt",
      "execution_time": 129.2925591468811
    },
    "coverage_regression": {
      "success": true,
      "returncode": 0,
      "stdout": "Starting coverage regression monitoring...\nRunning tests to get current coverage...\nRegression monitoring report saved to validation_test/coverage_regression_report.txt\n\n================================================================================\nCOVERAGE REGRESSION MONITORING REPORT\n================================================================================\n\nCurrent Overall Coverage: 73.8%\nTotal Lines: 1907\nCovered Lines: 1407\n\n\u2705 NO REGRESSIONS DETECTED\n\nCOVERAGE GAPS IDENTIFIED\n----------------------------------------\nLow Coverage Files:\n  \ud83d\udcc9 src/config_loader.py: 36.0% (55 missing lines)\n  \ud83d\udcc9 src/main_stdio.py: 0.0% (16 missing lines)\n  \ud83d\udcc9 src/main_web.py: 0.0% (20 missing lines)\n  \ud83d\udcc9 src/parsers/base_parser.py: 0.0% (13 missing lines)\n  \ud83d\udcc9 src/parsers/stix_parser.py: 58.9% (197 missing lines)\n\nUncovered Functions:\n  \ud83d\udd0d validate_config in src/config_loader.py\n  \ud83d\udd0d ConfigLoader.__init__ in src/config_loader.py\n  \ud83d\udd0d ConfigLoader.load_tools_config in src/config_loader.py\n  \ud83d\udd0d ConfigLoader.load_data_sources_config in src/config_loader.py\n  \ud83d\udd0d HTTPProxy.serve_web_interface in src/http_proxy.py\n  \ud83d\udd0d main in src/http_proxy.py\n  \ud83d\udd0d main in src/main_stdio.py\n  \ud83d\udd0d main in src/main_web.py\n  \ud83d\udd0d MCPServer.get_app in src/mcp_server.py\n  \ud83d\udd0d MCPServer.run in src/mcp_server.py\n  \ud83d\udd0d create_app in src/mcp_server.py\n  \ud83d\udd0d BaseParser.parse in src/parsers/base_parser.py\n  \ud83d\udd0d BaseParser.validate_data in src/parsers/base_parser.py\n  \ud83d\udd0d BaseParser.get_supported_entity_types in src/parsers/base_parser.py\n  \ud83d\udd0d BaseParser.get_format_name in src/parsers/base_parser.py\n  ... and 4 more functions\n\nHISTORICAL COMPARISON\n----------------------------------------\n\n================================================================================\n",
      "stderr": "",
      "report_file": "validation_test/coverage_regression_report.txt",
      "execution_time": 196.38921427726746
    },
    "performance_benchmark": {
      "success": true,
      "returncode": 0,
      "stdout": "Starting performance benchmarking...\nRunning 3 iterations per category\n\nBenchmarking unit tests (Unit tests (fast, isolated))...\n  Run 1/3...\n    Time: 0.89s, Tests: 0, Result: PASS\n  Run 2/3...\n    Time: 0.89s, Tests: 0, Result: PASS\n  Run 3/3...\n    Time: 0.88s, Tests: 0, Result: PASS\nBenchmarking integration tests (Integration tests (moderate speed))...\n  Run 1/3...\n    Time: 1.86s, Tests: 0, Result: PASS\n  Run 2/3...\n    Time: 1.85s, Tests: 0, Result: PASS\n  Run 3/3...\n    Time: 1.85s, Tests: 0, Result: PASS\nBenchmarking performance tests (Performance tests (slow))...\n  Run 1/3...\n    Time: 0.38s, Tests: 0, Result: PASS\n  Run 2/3...\n    Time: 0.39s, Tests: 0, Result: PASS\n  Run 3/3...\n    Time: 0.38s, Tests: 0, Result: PASS\nBenchmarking e2e tests (End-to-end tests (slowest))...\n  Run 1/3...\n    Time: 11.30s, Tests: 40, Result: FAIL\n  Run 2/3...\n    Time: 11.29s, Tests: 40, Result: FAIL\n  Run 3/3...\n    Time: 11.51s, Tests: 40, Result: FAIL\nBenchmarking full_suite tests (Complete test suite)...\n  Run 1/3...\n    Time: 37.05s, Tests: 0, Result: FAIL\n  Run 2/3...\n    Time: 38.44s, Tests: 0, Result: FAIL\n  Run 3/3...\n    Time: 37.34s, Tests: 0, Result: FAIL\nBenchmark report saved to validation_test/performance_benchmark_report.txt\n\n================================================================================\nPERFORMANCE BENCHMARK REPORT\n================================================================================\n\nOVERALL STATUS: \u2705 PASSED\n\nPERFORMANCE SUMMARY\n----------------------------------------\n\u2705 unit: 0.9s (0 tests, target: 30s)\n\u2705 integration: 1.9s (0 tests, target: 120s)\n\u2705 performance: 0.4s (0 tests, target: 300s)\n\u2705 e2e: 11.4s (40 tests, target: N/As)\n\u2705 full_suite: 37.6s (0 tests, target: 600s)\n\n\nSLOWEST TESTS BY CATEGORY\n----------------------------------------\n\n================================================================================\n",
      "stderr": "",
      "report_file": "validation_test/performance_benchmark_report.txt",
      "execution_time": 352.7328040599823
    }
  },
  "overall_success": false
}